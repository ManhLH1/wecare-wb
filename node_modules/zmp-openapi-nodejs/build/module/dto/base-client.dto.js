import axios, { AxiosError } from 'axios';
import FormData from 'form-data';
import qs from 'qs';
import { Constant } from '../config/constant';
export class BaseClient {
    apiKey;
    isUseProxy = false;
    proxy;
    domain = Constant.DOMAIN_PROD;
    sdkVersion = '2.1.0';
    sdkName = 'Node.js';
    headers;
    apiKeyHeaderName;
    identityHeaderName;
    identity;
    version;
    constructor(version, apiKeyHeaderName, apiKey, identityHeaderName, identity, proxy) {
        this.version = version;
        this.apiKeyHeaderName = apiKeyHeaderName;
        this.apiKey = apiKey;
        this.identityHeaderName = identityHeaderName;
        this.identity = identity;
        if (proxy) {
            this.proxy = proxy;
            this.isUseProxy = true;
        }
        this.headers = {
            [apiKeyHeaderName]: `Bearer ${this.apiKey}`,
            [identityHeaderName]: this.identity,
            'X-Sdk-Version': this.sdkVersion,
            'X-Sdk-Name': this.sdkName,
        };
    }
    validateInit = () => {
        if (!this.apiKey ||
            !this.identity ||
            !this.apiKeyHeaderName ||
            !this.identityHeaderName) {
            throw new Error('Invalid init value');
        }
        if (this.isUseProxy && (!this.proxy.host || !this.proxy.port)) {
            throw new Error('Invalid proxy value');
        }
    };
    setProxy(proxy) {
        this.proxy = proxy;
        this.isUseProxy = true;
    }
    cancelProxy() {
        this.proxy = null;
        this.isUseProxy = false;
    }
    async doGet(endpoint, params, options = {}) {
        try {
            this.validateInit();
            const response = await axios.get(`${this.domain}${endpoint}`, {
                params,
                headers: this.headers,
                proxy: this.isUseProxy && { ...this.proxy },
            });
            return {
                error: response.data.err,
                message: response.data.msg,
                ...response.data.data,
            };
        }
        catch (error) {
            if (error instanceof AxiosError) {
                return {
                    error: (error.response ? error.response.status : error.status) ?? -1,
                    message: options.mapAxiosError
                        ? options.mapAxiosError(error)
                        : error.response
                            ? error.response.data.msg
                            : error.message,
                    ...{},
                };
            }
            return {
                error: -1,
                message: error instanceof Error ? error.message : error,
                ...{},
            };
        }
    }
    async doPost(endpoint, params, options = {}) {
        try {
            this.validateInit();
            const response = await axios.post(`${this.domain}${endpoint}`, params, {
                headers: this.headers,
                proxy: this.isUseProxy && { ...this.proxy },
            });
            return {
                error: response.data.err,
                message: response.data.msg,
                ...response.data.data,
            };
        }
        catch (error) {
            if (error instanceof AxiosError) {
                return {
                    error: (error.response ? error.response.status : error.status) ?? -1,
                    message: options.mapAxiosError
                        ? options.mapAxiosError(error)
                        : error.response
                            ? error.response.data.msg
                            : error.message,
                    ...{},
                };
            }
            return {
                error: -1,
                message: error instanceof Error ? error.message : error,
                ...{},
            };
        }
    }
    async doPut(endpoint, params, options = {}) {
        try {
            this.validateInit();
            const response = await axios.put(`${this.domain}${endpoint}`, params, {
                headers: this.headers,
                proxy: this.isUseProxy && { ...this.proxy },
            });
            return {
                error: response.data.err,
                message: response.data.msg,
                ...response.data.data,
            };
        }
        catch (error) {
            if (error instanceof AxiosError) {
                return {
                    error: (error.response ? error.response.status : error.status) ?? -1,
                    message: options.mapAxiosError
                        ? options.mapAxiosError(error)
                        : error.response
                            ? error.response.data.msg
                            : error.message,
                    ...{},
                };
            }
            return {
                error: -1,
                message: error instanceof Error ? error.message : error,
                ...{},
            };
        }
    }
    async getMiniApps(appSlice) {
        return this.doGet(`${this.buildRequestURI()}`, { ...appSlice });
    }
    getVersionsMiniApp = (appSlice) => {
        return this.doGet(`${this.buildRequestURI(appSlice.miniAppId, Constant.VERSIONS)}`, { ...appSlice }, {
            mapAxiosError(error) {
                if (error.response.status === 400) {
                    return 'Invalid Mini App ID';
                }
                return error.message;
            },
        });
    };
    createMiniApp = (appInfo) => {
        return this.doPost(`${this.buildRequestURI()}`, {
            ...appInfo,
        });
    };
    deployMiniApp = (deployApp) => {
        const formData = new FormData();
        formData.append('file', deployApp.file, {
            contentType: 'application/zip',
        });
        return this.doPost(`${this.buildRequestURI(deployApp.miniAppId, Constant.UPLOAD)}?${qs.stringify({
            name: deployApp.name,
            description: deployApp.description,
        })}`, formData);
    };
    requestPublishMiniApp = (requestPublishApp) => {
        return this.doPost(`${this.buildRequestURI(requestPublishApp.miniAppId, Constant.REQUEST_PUBLISH)}`, { ...requestPublishApp });
    };
    publishMiniApp = (publishApp) => {
        return this.doPost(`${this.buildRequestURI(publishApp.miniAppId, Constant.PUBLISH)}`, { ...publishApp });
    };
    getStats = async (statsRequest) => {
        const response = await this.doGet(`${this.buildRequestURI(statsRequest.miniAppId, Constant.STATS)}`, {
            ...statsRequest,
        });
        const { error, message, ...data } = response;
        return {
            error,
            message,
            data,
        };
    };
    listPaymentChannels = async (request) => {
        return this.doGet(`${this.buildRequestURI(request.miniAppId, Constant.PAYMENT_CHANNELS)}`, {});
    };
    convertObjectToFormData = (obj) => {
        const formData = new FormData();
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const value = obj[key];
                if (Array.isArray(value)) {
                    for (let i = 0; i < value.length; i++) {
                        formData.append(`${key}[${i}]`, value[i]);
                    }
                }
                else if (typeof obj[key] === 'boolean') {
                    formData.append(key, obj[key] ? 'true' : 'false');
                }
                else {
                    formData.append(key, obj[key]);
                }
            }
        }
        return formData;
    };
    createPaymentChannel = async (request) => {
        return this.doPost(`${this.buildRequestURI(request.miniAppId, Constant.PAYMENT_CHANNELS)}`, this.convertObjectToFormData(request));
    };
    updatePaymentChannel = async (request) => {
        return this.doPut(`${this.buildRequestURI(request.miniAppId, Constant.PAYMENT_CHANNELS, request.channelId)}`, this.convertObjectToFormData(request));
    };
    buildRequestURI = (appId, path, ...pathVariables) => {
        let rs = `${this.version}${Constant.APPS}`;
        if (!!appId) {
            rs += `/${appId}`;
        }
        if (!!path) {
            rs += path;
        }
        for (const pathVariable of pathVariables) {
            rs += `/${pathVariable}`;
        }
        return rs;
    };
}
export default { BaseClient };
//# sourceMappingURL=data:application/json;base64,