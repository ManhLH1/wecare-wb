import { AxiosError } from 'axios';
import FormData from 'form-data';
import { AppInfo, CreateAppResult } from '../interface/app-info.interface';
import { AppList, AppSlice, VersionSlice } from '../interface/app-slice.interface';
import { VersionList } from '../interface/app-version.interface';
import { DeployApp, DeployResult } from '../interface/deploy-app.interface';
import { Proxy } from '../interface/proxy.interface';
import { PublishApp, RequestPublishApp } from '../interface/publish-app.interface';
import { BaseResult } from '../interface/response.interface';
import { StatsRequest } from '../interface/stats.interface';
import { CreateUpdatePaymentChannelResult, ListPaymentChannelRequest, PaymentChannelRequest, PaymentChannelList } from '../interface/payment-channel.interface';
export declare class BaseClient {
    private apiKey;
    private isUseProxy;
    private proxy;
    private domain;
    private sdkVersion;
    private sdkName;
    private headers;
    private apiKeyHeaderName;
    private identityHeaderName;
    private identity;
    private version;
    constructor(version: string, apiKeyHeaderName: string, apiKey: string, identityHeaderName: string, identity: string, proxy?: Proxy);
    private validateInit;
    setProxy(proxy: Proxy): void;
    cancelProxy(): void;
    protected doGet<T, P = {}>(endpoint: string, params: P, options?: {
        mapAxiosError?: (error: AxiosError) => string;
    }): Promise<BaseResult & T>;
    protected doPost<T, P = {}>(endpoint: string, params: P, options?: {
        mapAxiosError?: (error: AxiosError) => string;
    }): Promise<BaseResult & T>;
    protected doPut<T, P = {}>(endpoint: string, params: P, options?: {
        mapAxiosError?: (error: AxiosError) => string;
    }): Promise<BaseResult & T>;
    getMiniApps(appSlice: AppSlice): Promise<BaseResult & AppList>;
    getVersionsMiniApp: (appSlice: VersionSlice) => Promise<BaseResult & VersionList>;
    createMiniApp: (appInfo: AppInfo) => Promise<BaseResult & CreateAppResult>;
    deployMiniApp: (deployApp: DeployApp) => Promise<BaseResult & DeployResult>;
    requestPublishMiniApp: (requestPublishApp: RequestPublishApp) => Promise<BaseResult>;
    publishMiniApp: (publishApp: PublishApp) => Promise<BaseResult>;
    getStats: (statsRequest: StatsRequest) => Promise<{
        error: number;
        message: string;
        data: {
            data: JSON;
        };
    }>;
    listPaymentChannels: (request: ListPaymentChannelRequest) => Promise<BaseResult & PaymentChannelList>;
    protected convertObjectToFormData: (obj: Record<string, any>) => FormData;
    createPaymentChannel: <T extends PaymentChannelRequest>(request: T) => Promise<BaseResult & CreateUpdatePaymentChannelResult>;
    updatePaymentChannel: <T extends PaymentChannelRequest>(request: T) => Promise<BaseResult & CreateUpdatePaymentChannelResult>;
    private buildRequestURI;
}
declare const _default: {
    BaseClient: typeof BaseClient;
};
export default _default;
